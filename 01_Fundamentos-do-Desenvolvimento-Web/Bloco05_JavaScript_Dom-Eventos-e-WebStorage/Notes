# DOM
O DOM (Document Object Model) é uma interface que representa como os HTML e XML são lidos pelo browser. Após a leitura do documento HTML pelo browser, o DOM cria um objeto que faz uma representação do documento e define meios de como essa estrutura pode ser acessada, dessa forma podemos utilizar o JavaScript para manipular o DOM e assim alterar o estilo e o conteúdo de nossa página.
No DOM nossa página é representada por nós e objetos, e é através deles que iremos realizar a comunicação do nosso HTML com o JavaScript . Sendo assim, podemos dizer que o DOM é uma representação orientada a objetos da página da web, que pode ser modificada com uma linguagem de script como JavaScript.
Pense assim: a página HTML/CSS/JS que você faz é um programa. O navegador é quem interpreta esse código e, a partir dele, gera a página que você vê na Internet.
Pois bem, o DOM é uma estrutura da sua página que o navegador monta quando lê. O seu intuito é justamente permitir ao programa acessar os elementos da página usando código e dar a ele o poder de manipulá-las.


# Buscar elementos
A propriedade parentNode acessa o elemento pai do elemento sobre o qual a propriedade é chamada. Mas ela não é a única forma de, a partir de um elemento, navegar para outros.
Há, ao todo, as seguintes propriedades:
    parentNode : retorna o nó pai.
    parentElement : retorna o elemento pai.
    childNodes : retorna um NodeList com todos os nós filhos.
    children : retorna um HTMLCollection com todos os elementos filhos.
    firstChild : retorna o primeiro nó filho.
    firstElementChild : retorna o primeiro elemento filho.
    lastChild : retorna o último nó filho.
    lastElementChild : retorna o último elemento filho.
    nextSibling : retorna o próximo nó.
    nextElementSibling : retorna o próximo elemento.
    previousSibling : retorna o nó anterior.
    previousElementSibling : retorna o elemento anterior.
É importante dizer que, à primeira vista, as propriedades nextSibling e nextElementSibling parecem fazer a mesma coisa, mas uma pega o próximo nó do DOM , enquanto a outra pega o próximo elemento, e nem sempre o próximo nó é um elemento.


# Cookies
São salvos como string
Cookies são dados salvos em pequenos arquivos de texto no computador da pessoa que utiliza a Internet .
Quando o servidor envia a página Web para o browser , a conexão é desligada e o servidor não tem mais acesso às informações da requisição - como os itens que a pessoa usuária adicionou a um carrinho de compras ou o e-mail que lhe dará acesso a sua conta. Cookies foram inventados para salvar dados das pessoas usuárias no próprio browser , pois, dessa forma, uma página conseguirá acessá-los para executar uma lógica com os parâmetros personalizados por pessoa.
Cookies são salvos no formato chave-valor . Quando o navegador faz a requisição ao servidor para acessar uma página Web, os cookies dessa página são adicionados à requisição. Dessa forma, o servidor tem acesso aos dados da pessoa usuária. Nos exemplos a seguir, você irá aprender a criar e manipular cookies . Para testá-los, é importante que o seu navegador tenha o suporte a cookie habilitado. Para visualizar os cookies de uma aplicação, abra a janela para inspecionar a página. No menu superior, clique em Application e na barra lateral esquerda, na sessão Storage, clique em Cookies.
O Javascript permite que a gente crie, leia e delete cookie através da propriedade document.cookie .
Para criar um cookie, você só precisa atribuir à propriedade document.cookie uma string contendo o nome e o valor do que se pretende armazenar:
    document.cookie = "email=isabella@email.com";

Por definição, o cookie é deletado quando fechamos o navegador. Para que isso não aconteça, você pode adicionar uma data para expiração como no exemplo abaixo:
    document.cookie = "email=isabella@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC";

Você pode adicionar também o parâmetro path que dirá ao navegador qual caminho o cookie que você criou pertence. Por padrão, o cookie pertence à página atual.
    document.cookie = "email=isabella@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC; path=/";

O Javascript permite que você atribua document.cookie a uma variável. Assim, você conseguirá ler as informações que estão armazenadas. No exemplo abaixo, ao imprimirmos no console o valor de myCookie, o que será retornado é uma string contendo o nome e o valor do cookie. Quando temos mais de um par chave-valor, a variável armazenará em uma única string os pares separados por ponto-vírgula.
    const myCookie = document.cookie;
    console.log(myCookie) // email=isabella@email.com

E você pode também alterar o valor do cookie da mesma forma que o criamos. Basta atribuir a document.cookie a nova informação que você quer armazenar.
    document.cookie = "email=cleyton@email.com; expires=Thu, 17 Dec 2020 12:00:00 UTC";

Para deletar o cookie, você não precisa especificar o valor que pretende deletar. Você pode deletá-lo passando uma data que já expirou:
    document.cookie = "email=; expires=Tue, 01 Dec 2020 12:00:00 UTC;"


# Local e Session Storage
Salvo como objeto / string
HTML Web Storage provê dois objetos para armazenamento de dados no cliente ( browser da pessoa), no formato de chave-valor de um modo mais intuitivo do que nos Cookies :
localStorage - salva os dados sem data de expiração . Os dados não serão removidos quando o browser for fechado, ou seja, eles ficarão disponíveis enquanto não forem explicitamente removidos.

Para os exemplos a seguir, você pode usar o seguinte código em seu index.html para poder usar o Live Server. Mas se preferir, pode executar os comandos no console também.

sessionStorage - salva os dados apenas para a sessão atual. Os dados são removidos assim que a pessoa fecha a aba ( tab ) ou o browser .

É muito mais simples utilizar localStorage e sessionStorage do que Cookies , mas o uso de Cookies não é totalmente dispensável.
Em regra geral, utilizamos Cookies quando precisamos dos dados no cliente ( browser ) e no servidor, pois os Cookies são enviados para o servidor a cada requisição. Caso contrário, utilizamos localStorage e sessionStorage .